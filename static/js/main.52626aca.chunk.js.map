{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["ChartCard","indices","values","i","push","toString","Math","random","labels","datasets","label","data","backgroundColor","borderColor","borderWidth","pointRadius","hitRadius","fill","cubicInterpolationMode","Card","style","width","marginTop","marginLeft","Body","Title","this","props","title","Text","text","getData","height","options","legend","display","scales","xAxes","gridLines","drawBorder","drawOnChartArea","lineWidth","zeroLineWidth","yAxes","React","Component","App","className","Navbar","expand","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"gOAOMA,E,wKAIF,IAFA,IAAIC,EAAU,GACVC,EAAS,GACJC,EAAI,EAAGA,EAAI,GAAIA,IACtBF,EAAQG,KAAKD,EAAEE,YACfH,EAAOE,KAAqB,GAAhBE,KAAKC,UAmBnB,MAhBa,CACXC,OAAQP,EACRQ,SAAU,CACR,CACEC,MAAO,GACPC,KAAMT,EACNU,gBAAiB,UACjBC,YAAa,UACbC,YAAa,EACbC,YAAa,EACbC,UAAW,GACXC,MAAM,EACNC,uBAAwB,gB,+BAQ9B,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAM,MAAOC,UAAU,MAAOC,WAAW,SACtD,kBAACJ,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,KAAaC,KAAKC,MAAMC,OACxB,kBAACT,EAAA,EAAKU,KAAN,KAAYH,KAAKC,MAAMG,MACvB,kBAAC,IAAD,CACEnB,KAAMe,KAAKK,UACXC,OAAQ,IACRC,QAAS,CACPC,OAAQ,CACNC,SAAS,GAEXC,OAAQ,CACNC,MAAO,CAAC,CACNC,UAAW,CACTC,YAAY,EACZC,iBAAiB,EACjBC,UAAW,EACXC,cAAe,MAGnBC,MAAO,CAAC,CACNL,UAAW,CACTE,iBAAiB,EACjBC,UAAW,GACXC,cAAe,gB,GAtDbE,IAAMC,WAiFfC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAQC,OAAO,MACb,kBAACD,EAAA,EAAOE,MAAR,CAAcC,KAAK,KAAI,0DAEzB,kBAAC,EAAD,CAAWvB,MAAM,2DAAcE,KAAK,4HACpC,kBAAC,EAAD,CAAWF,MAAM,uEAAgBE,KAAK,uHACtC,kBAAC,EAAD,CAAWF,MAAM,wCAAUE,KAAK,2HCtEpBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.52626aca.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Container, Navbar, Nav, NavDropdown, Form, FormControl, Button, Card } from 'react-bootstrap';\nimport { Line } from \"react-chartjs-2\";\n\nclass ChartCard extends React.Component {\n  getData() {\n    var indices = [];\n    var values = [];\n    for (var i = 0; i < 25; i++) {\n      indices.push(i.toString());\n      values.push(Math.random() * 50);\n    }\n\n    const data = {\n      labels: indices,\n      datasets: [\n        {\n          label: '',\n          data: values,\n          backgroundColor: '#cccccc',\n          borderColor: '#777777',\n          borderWidth: 1,\n          pointRadius: 0,\n          hitRadius: 20,\n          fill: false,\n          cubicInterpolationMode: 'monotone',\n        }\n      ]\n    };\n    return data    \n  }\n\n  render() {\n    return (\n        <Card style={{ width:'99%', marginTop:'5px', marginLeft:'0.5%' }}>\n          <Card.Body>\n            <Card.Title>{this.props.title}</Card.Title>\n            <Card.Text>{this.props.text}</Card.Text>\n            <Line\n              data={this.getData()}\n              height={120}\n              options={{\n                legend: {\n                  display: false\n                },\n                scales: {\n                  xAxes: [{\n                    gridLines: {\n                      drawBorder: true,\n                      drawOnChartArea: true,\n                      lineWidth: 0.0,\n                      zeroLineWidth: 0.5\n                    }\n                  }],\n                  yAxes: [{\n                    gridLines: {\n                      drawOnChartArea: true,\n                      lineWidth: 0.2,\n                      zeroLineWidth: 0.5\n                    }\n                  }]\n                }\n              }}\n          />\n          </Card.Body>\n        </Card>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar expand='lg'>\n          <Navbar.Brand href=\"#\"><h4>잡동사니</h4></Navbar.Brand>\n        </Navbar>\n        <ChartCard title='경제 지표의 상관관계' text='경제 지표를 상관관계지수를 통해 시각화한다.'></ChartCard>\n        <ChartCard title='서울 부동산 매매가격지수' text='서울 부동산 매매 가격의 등락을 시각화한다.'></ChartCard>\n        <ChartCard title='주식과 부동산' text='주식과 부동산 어느 것이 투자에 더 유리한가?'></ChartCard>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}