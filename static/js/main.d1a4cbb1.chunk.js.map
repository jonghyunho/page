{"version":3,"sources":["ContentCard.js","LandPriceCard.js","KospiIndexCard.js","App.js","serviceWorker.js","index.js"],"names":["ContentCard","indices","values","i","push","toString","Math","random","this","getValues","length","labels","datasets","label","data","fill","backgroundColor","borderColor","borderWidth","pointRadius","hitRadius","cubicInterpolationMode","lineTension","line","getData","height","options","legend","display","scales","xAxes","gridLines","drawBorder","drawOnChartArea","lineWidth","zeroLineWidth","yAxes","style","color","Card","width","marginTop","marginLeft","Body","Title","props","title","Text","text","React","Component","LandPriceCard","state","fetch","response","json","setState","console","log","result","index","prices","toFixed","KospiIndexCard","x","XMLHttpRequest","open","proxyUrl","self","onload","onerror","JSON","parse","responseText","chart","setRequestHeader","send","timestamp","d","Date","month","getMonth","day","getDate","year","getFullYear","join","formatDate","adjclose","indicators","parseInt","App","kospi_index_card","exchange_rate_card","land_price_card","className","Navbar","expand","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d1a4cbb1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { Card } from 'react-bootstrap';\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nclass ContentCard extends React.Component {\r\n  getValues() {\r\n    var indices = [];\r\n    var values = [];\r\n    for (var i = 0; i < 10; i++) {\r\n      indices.push(i.toString());\r\n      values.push(Math.random() * 50);\r\n    }\r\n\r\n    return [indices, values];\r\n  }\r\n\r\n  getData() {\r\n    var values = this.getValues();\r\n    if (values[0].length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const data = {\r\n      labels: values[0],\r\n      datasets: [\r\n        {\r\n          label: '',\r\n          data: values[1],\r\n          fill: false,\r\n          backgroundColor: '#2279B5',\r\n          borderColor: '#2279B5',\r\n          borderWidth: 2,\r\n          pointRadius: 0,\r\n          hitRadius: 20,\r\n          cubicInterpolationMode: 'monotone',\r\n          lineTension: 0.1\r\n        }\r\n      ]\r\n    };\r\n\r\n    return data    \r\n  }\r\n\r\n  render() {\r\n    let line;\r\n    let data = this.getData();\r\n    if (data != null) {\r\n      line = <Line\r\n      data={data}\r\n      height={150}\r\n      options={{\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [{\r\n            gridLines: {\r\n              drawBorder: true,\r\n              drawOnChartArea: true,\r\n              lineWidth: 0.0,\r\n              zeroLineWidth: 0.5\r\n            }\r\n          }],\r\n          yAxes: [{\r\n            gridLines: {\r\n              drawOnChartArea: true,\r\n              lineWidth: 0.2,\r\n              zeroLineWidth: 0.5\r\n            }\r\n          }]\r\n        }\r\n      }}></Line>\r\n    } else {\r\n      line = <h6 style={{ color:'#333333' }}>데이터 로딩 중...</h6>\r\n    }\r\n\r\n    return (\r\n        <Card style={{ width:'94%', marginTop:'15px', marginLeft:'3%' }}>\r\n          <Card.Body>\r\n            <Card.Title>{this.props.title}</Card.Title>\r\n            <Card.Text style={{ color:'#999999' }}>{this.props.text}</Card.Text>\r\n            { line }\r\n          </Card.Body>\r\n        </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ContentCard;","import ContentCard from './ContentCard';\r\n\r\nclass LandPriceCard extends ContentCard {\r\n  constructor() {\r\n    super();\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const response = await fetch(`https://api.jonghyunho.com/v1/chartGetHousePrice`);\r\n      const json = await response.json();\r\n      this.setState({ data: json });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  getValues() {\r\n    var indices = [];\r\n    var values = [];\r\n\r\n    var result = this.state.data;\r\n\r\n    for (var index in result.prices) {\r\n      if (index % 4 === 0) {\r\n        indices.push(result.prices[index][0]);\r\n      } else {\r\n        indices.push('');\r\n      }\r\n      values.push(result.prices[index][1].toFixed(2));\r\n    }\r\n\r\n    return [indices, values];\r\n  }\r\n}\r\n\r\nexport default LandPriceCard;","import './App.css';\r\n\r\nimport ContentCard from './ContentCard';\r\n\r\nclass KospiIndexCard extends ContentCard {\r\n  constructor() {\r\n    super();\r\n    this.state = { data: [] };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n      targetUrl = 'https://query1.finance.yahoo.com/v8/finance/chart/%5EKS11?period1=1546268400&period2=1589587200&interval=1d';\r\n\r\n    var x = new XMLHttpRequest();\r\n    x.open('GET', proxyUrl + targetUrl);\r\n\r\n    var self = this;\r\n    x.onload = x.onerror = function() {\r\n      var result = JSON.parse(x.responseText);\r\n      result = result.chart.result[0];\r\n      self.setState({ data: result })\r\n    };\r\n    x.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n    x.send('');\r\n  }\r\n\r\n  formatDate(timestamp) {\r\n    var d = new Date(timestamp * 1000),\r\n    month = '' + (d.getMonth() + 1),\r\n    day = '' + d.getDate(),\r\n    year = d.getFullYear();\r\n\r\n    if (month.length < 2) month = '0' + month;\r\n    if (day.length < 2) day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n  }\r\n\r\n  getValues() {\r\n    var indices = [];\r\n    var values = [];\r\n\r\n    var result = this.state.data;\r\n\r\n    if (result.length === 0) return [indices, values];\r\n\r\n    for (var index in result.timestamp) {\r\n      if (index % 3 === 0) {\r\n        indices.push(this.formatDate(result.timestamp[index]));\r\n      } else {\r\n        indices.push('');\r\n      }\r\n    }\r\n\r\n    var adjclose = result.indicators.adjclose[0].adjclose;\r\n    for (index in adjclose) {\r\n      values.push(parseInt(adjclose[index]));\r\n    }\r\n    return [indices,values];\r\n  }\r\n}\r\n\r\nexport default KospiIndexCard;","import React from 'react';\nimport { Navbar, Card } from 'react-bootstrap';\n//import { render } from '@testing-library/react';\n\nimport './App.css';\n\nimport ContentCard from './ContentCard';\nimport LandPriceCard from './LandPriceCard';\nimport KospiIndexCard from './KospiIndexCard';\nimport ExchangeRateCard from './ExchangeRateCard';\n\nimport CSVToArray from \"./CSVToArray.js\";\n\nlet show_all = false;\n\nfunction App() {\n  let kospi_index_card;\n  let exchange_rate_card;\n  let land_price_card;\n\n  kospi_index_card = <KospiIndexCard title='코스피 지수' text='코스피 지수를 시각화한다.'></KospiIndexCard>\n  land_price_card = <LandPriceCard title='서울 부동산 매매가격지수' text='서울 부동산 매매 가격의 등락을 시각화한다.'></LandPriceCard>\n\n  if (show_all) {\n    exchange_rate_card = <ExchangeRateCard title='환율' text='원/달러 환율'></ExchangeRateCard>\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar expand='lg'>\n          <Navbar.Brand href=\"#\"><h3>잡동사니</h3></Navbar.Brand>\n        </Navbar>\n        { kospi_index_card }\n        { exchange_rate_card }\n        { land_price_card }\n        <ContentCard title='경제 지표의 상관관계 (준비중)' text='경제 지표를 상관관계지수를 통해 시각화한다.'></ContentCard>\n        <ContentCard title='주식과 부동산 (준비중)' text='주식과 부동산 어느 지표가 더 저평가 되어 있나?'></ContentCard>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}